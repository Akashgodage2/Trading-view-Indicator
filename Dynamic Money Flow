//@version=5
import TradingView/ta/7

indicator('Dynamic Money Flow', 'DMF', precision = 2, timeframe = '')

mode                    = input.string('Index', 'Mode', options = ['Index', 'Cumulative'])
period                  = input.int(26, 'Period', minval = 1, tooltip = 'Only applies to index mode.')
ma_switch               = input.string('EMA', 'Moving Averages', options = ['OFF', 'EMA', 'WMA', 'T3', 'FRAMA'], tooltip = 'Set the type of Moving Averages added on DMF or turn them off. MAs can also be turned off individually by setting the length to zero.')
fast_len                = input.int(8, 'Fast Length', minval = 0)
slow_len                = input.int(20, 'Slow Length', minval = 0)
fastUp                  = input.color(#00FF8BFF, 'Fast Up Color')
slowUp                  = input.color(#28DF8BFF, 'Slow Up Color')
slowDn                  = input.color(#DF287CFF, 'Slow Down Color')
fastDn                  = input.color(#FF0074FF, 'Fast Down Color')
neutral                 = input.color(#CAA335FF, 'Neutral Color')
fMA_col                 = input.color(#00FF8B26, 'Fast MA Color')
sMA_col                 = input.color(#FF007426, 'Slow MA Color')
fill_transp             = input.int(70, 'Fill Transparency', minval = 0, maxval = 100)
simulative_vol          = input.bool(false, 'Simulative Volume', group = 'Experimental Options', tooltip = 'Use this option if volume is not provided for the security or it\'s inappropriate.')
vol_power               = input.float(1.0, 'Power', minval = 0, maxval = 5, group = 'Experimental Options', tooltip = 'The power to which volume is raised. Numbers below 1 reduce the significance of volume in calculations, while numbers above 1 add to it. Setting power to zero will exclude volume from calculations.')
weight_distribution     = input.string('Dynamic', 'Weight Distribution Method', options = ['Dynamic', 'Static'], group = 'Experimental Options', tooltip = 'This is from where Dynamic Money Flow derives its name. By default, weight distribution is dynamic. However, it can be changed to apply a static bias.')
static_dist_bias        = input.int(50, 'Static Weight Distribution Bias', minval = 0, maxval = 100, group = 'Experimental Options', tooltip = 'After setting the previous option to Static, you can set a bias factor (0 - 100) for weight distribution. When set to zero, only Close to Range comparison will take effect. And with 100, only Close to Close comparison will be applied.')

vol                     = switch simulative_vol
    true                => math.pow(math.abs(close - close[1]) + math.abs(high - math.max(open, close)) * 2 + math.abs(math.min(open, close) - low) * 2, vol_power)
    false               => math.pow(volume, vol_power)
    
alpha                   = switch weight_distribution
    'Dynamic'           => ta.tr == 0 ? 0 : math.abs((close - close[1]) / ta.tr)
    'Static'            => static_dist_bias / 100
    
trh                     = math.max(high, close[1])
trl                     = math.min(low, close[1])
ctr                     = ta.tr == 0 ? 0 : (close - trl + close - trh) / ta.tr * (1 - alpha) * vol
ctc                     = close - close[1] == 0 ? 0 : close > close[1] ? alpha * vol : -alpha * vol

dmf                     = switch mode
    'Index'             => ta.rma(ctr + ctc, period) / ta.rma(vol, period)
    'Cumulative'        => ta.cum(ctr + ctc)
    
fast_ma                 = if fast_len != 0
    switch ma_switch
        'EMA'           => ta.ema(dmf, fast_len)
        'WMA'           => ta.wma(dmf, fast_len)
        'T3'            => ta.t3(dmf, fast_len)
        'FRAMA'         => ta.frama(dmf, fast_len)

slow_ma                 = if slow_len != 0
    switch ma_switch
        'EMA'           => ta.ema(dmf, slow_len)
        'WMA'           => ta.wma(dmf, slow_len)
        'T3'            => ta.t3(dmf, slow_len)
        'FRAMA'         => ta.frama(dmf, slow_len)

// Color
var color main_color    = na

if      mode == 'Index'
    if      dmf >= 0 and dmf >= 0.1
        main_color := fastUp
    else if dmf >= 0 and dmf <  0.1
        main_color := slowUp
    else if dmf <  0 and dmf >= -0.1
        main_color := slowDn
    else
        main_color := fastDn
        
else if mode == 'Cumulative' and not na(fast_ma) 
    if      dmf >= fast_ma and fast_ma >= slow_ma
        main_color := fastUp
    else if dmf >= fast_ma and fast_ma <  slow_ma
        main_color := slowUp
    else if dmf <  fast_ma and fast_ma >= slow_ma
        main_color := slowDn
    else if dmf <  fast_ma and fast_ma <  slow_ma
        main_color := fastDn
else
    main_color := neutral

// Plots
pFastMA                 = plot(fast_ma, 'Fast MA', color = fMA_col, linewidth = 1)
pSlowMA                 = plot(slow_ma, 'Slow MA', color = sMA_col, linewidth = 1)
pMain                   = plot(dmf, 'DMF', color = main_color, linewidth = 2)
pZero                   = plot(mode == 'Index' ? 0 : na, editable = false, display = display.none)

hline(mode == 'Index' ? 0 : na, 'Zero Line', color = #787B86FF, linestyle = hline.style_dashed)
hline(mode == 'Index' ? 0.1 : na, 'Level', color = #787B8680, linestyle = hline.style_dashed)
hline(mode == 'Index' ? -0.1 : na, 'Level', color = #787B8680, linestyle = hline.style_dashed)

fill(pMain, pZero, title = 'Oscillator Background', color = color.new(dmf >= 0 ? fastUp : fastDn, 95))
fill(pFastMA, pSlowMA, title = 'Moving Average Fill', color = color.new(fast_ma > slow_ma ? fMA_col : sMA_col, fill_transp))

barcolor(main_color)

